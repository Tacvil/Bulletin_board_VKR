@startuml
'https://plantuml.com/class-diagram

MainActivity ..> MainViewModel
MainActivity -> FilterActivity
MainActivity -> DescriptionActivity
MainActivity -> EditAdsActivity
MainActivity -> SettingsActivity
MainViewModel ..> DbManager
MainViewModel ..|> ReadDataCallback
MainViewModel ..|> FinishWorkListener
EditAdsActivity ..|> FinishWorkListener
EditAdsActivity --* ImageListFrag
EditAdsActivity ..> MainViewModel
DbManager .> ReadDataCallback
DbManager .> FinishWorkListener
SettingsActivity --* SettingsFragment


class MainViewModel{
    - dbManager: DbManager
    + liveAdsData: MutableLiveData<ArrayList<Announcement>?>
    + lastDocumentAds: QueryDocumentSnapshot?

    + loadAllAnnouncementFirstPage(context: Context,filter: MutableMap<String, String>): Unit
    + loadAllAnnouncementNextPage(context: Context,time: String,price: Int?,viewsCounter: String,filter: MutableMap<String, String>): Unit
    + onFavClick(ad: Announcement,adArray: ArrayList<Announcement>): Unit
    + adViewed(ad: Announcement): Unit
    + loadMyAnnouncement(): Unit
    + loadMyFavs(): Unit
    + deleteItem(ad: Announcement): Unit
    + saveFcmTokenToDb(token: String): Unit
}

class DbManager {
    - firestoreDb: FirebaseFirestore
    + dbStorage: StorageReference
    + auth: FirebaseAuth

    + saveFcmToken(token: String): Unit
    + publishAnnouncement(announcement: Announcement,finishListener: DbManager.FinishWorkListener): Unit
    + adViewed(ad: Announcement): Unit
    + onFavClick(ad: Announcement,listener: DbManager.FinishWorkListener): Unit
    - addToFavs(ad: Announcement,listener: DbManager.FinishWorkListener): Unit
    - removeFromFavs(ad: Announcement,listener: DbManager.FinishWorkListener): Unit
    + getAllAnnouncementByFilterFirstPage(options: AnnouncementQueryOptions,readDataCallback: ReadDataCallback?): Unit
    + getAllAnnouncementByFilterNextPage(options: AnnouncementQueryOptions,readDataCallback: ReadDataCallback?): Unit
    + deleteAnnouncement(ad: Announcement,listener: DbManager.FinishWorkListener): Unit
    - readDataFromDb(query: Query,readDataCallback: DbManager.ReadDataCallback?): Unit
}

class MainActivity  {
    - textViewAccount: TextView
    - imageViewAccount: ImageView
    - dialogHelper: DialogHelper
    - dialog: DialogSpinnerHelper
    + adapter: AdsRcAdapter
    + mAuth: FirebaseAuth
    + googleSignInLauncher: ActivityResultLauncher<Intent>
    - filterLauncher: ActivityResultLauncher<Intent>
    - firebaseViewModel: FirebaseViewModel
    - clearUpdate: Boolean
    - filterDb: MutableMap<String, String>
    - bManager: BillingManager?
    - onItemSelectedListener: RcViewSearchSpinnerAdapter
    - adapterSearch: RcViewSearchSpinnerAdapter
    - defPreferences: SharedPreferences
    - searchAdd(): Unit
    - queryValidate(query: String): String
    - onClickSelectOrderByFilter(): Unit
    - voiceRecognitionLauncher: ActivityResultLauncher<Intent>
    - onActivityResult(): Unit
    - onActivityResultFilter(): Unit
    - initViewModel(): Unit
    - init(): Unit
    - bottomMenuOnClick(): Unit
    - initRecyclerView(): Unit
    - getAdsFromCat(cat: String): Unit
    + uiUpdate(user: FirebaseUser?): Unit
    - navViewSetting(): Unit
    - scrollListener(): Unit
    - getAdsFromCat(adsList: ArrayList<Announcement>): Unit
    - getSelectedTheme(): Int
}

    interface ReadDataCallback {
        + readData(list: ArrayList<Announcement>, lastDocument:  QueryDocumentSnapshot?)
    }

    interface FinishWorkListener {
        + onFinish(isDone: Boolean)
    }

class EditAdsActivity  {
    + chooseImageFrag: ImageListFrag?
    - dialogHelper: DialogSpinnerHelper
    + imageAdapter: ImageAdapter
    - firebaseViewModel: FirebaseViewModel
    + editImagePos: Int
    - imageIndex: Int
    - isEditState: Boolean
    - ad: Announcement?
    - defPreferences: SharedPreferences
    - checkEditState(): Unit
    - isEditState(): Boolean
    - fillViews(ad: Announcement): Unit
    - init(): Unit
    - onClickSelectCountryCity(): Unit
    - onClickPublish(): Unit
    - isFieldsEmpty(): Boolean
    - onPublishFinish(): DbManager.FinishWorkListener
    - fillAnnouncement(): Announcement
    - onClickSelectCategory(): Unit
    + openChooseImageFrag(newList: ArrayList<Uri>?): Unit
    - uploadImages(): Unit
    - prepareImageByteArray(bitmap: Bitmap): ByteArray
    - updateImage(byteArray: ByteArray,url: String,listener: OnCompleteListener<Uri>): Unit
    - deleteImageByUrl(oldUrl: String,listener: OnCompleteListener<Void>): Unit
    - getSelectedTheme(): Int
}

class FilterActivity  {
    - dialogHelper: DialogSpinnerHelper
    - minPrice: Int?
    - maxPrice: Int?
    - filter: MutableMap<String, String>
    - defPreferences: SharedPreferences
    - focusChangeListener(minPrice: Int?,maxPrice: Int?): Unit
    - getFilter(): Unit
    - onClickSelectFilters(): Unit
    - onClickClear(): Unit
    - createFilter(): MutableMap<String, String>
    - getSelectedTheme(): Int
}

class DescriptionActivity  {
    + adapter: ImageAdapter
    - ad: Announcement?
    - defPreferences: SharedPreferences
    - init(): Unit
    - getIntentFromMainAct(): Unit
    - updateUI(ad: Announcement): Unit
    - fillTextViews(ad: Announcement): Unit
    - startPhoneCall(): Unit
    - sendEmail(): Unit
    - imageChangeCounter(): Unit
    - getSelectedTheme(): Int
}

class SettingsActivity {
    - defPreferences: SharedPreferences

    - getSelectedTheme(): Int
}
class SettingsFragment {
    + onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?)
    - applyTheme(themeName: String): Unit
}

class ImageListFrag {
    + adapter: SelectImageRvAdapter
    - dragCallback: ItemTouchMoveCallback
    - touchHelper: ItemTouchHelper
    - addItem: MenuItem?
    + updateAdapterFromEdit(bitmapList: List<Bitmap>): Unit
    + resizeSelectedImages(newList: ArrayList<Uri>,needClear: Boolean,activity: Activity): Unit
    + setSingleImage(uri: Uri,pos: Int): Unit
    + updateAdapter(newList: ArrayList<Uri>,activity: Activity): Unit
}

@enduml